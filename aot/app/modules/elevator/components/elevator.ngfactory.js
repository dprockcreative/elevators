/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import * as import0 from '../../../../../app/modules/elevator/components/elevator';
import * as import1 from '@angular/core/src/change_detection/change_detection_util';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/constants';
import * as import8 from '@angular/core/src/linker/component_factory';
import * as import9 from '@angular/core/src/zone/ng_zone';
import * as import10 from '../../../../../app/services/tasks.service';
import * as import11 from '../../../../node_modules/@angular/common/src/directives/ng_class.ngfactory';
import * as import12 from '../directives/elevator.ngfactory';
import * as import13 from '@angular/core/src/change_detection/differs/iterable_differs';
import * as import14 from '@angular/core/src/change_detection/differs/keyvalue_differs';
import * as import15 from '@angular/core/src/linker/element_ref';
import * as import16 from '@angular/common/src/directives/ng_class';
import * as import17 from '../../../../../app/modules/elevator/directives/elevator';
export var Wrapper_ElevatorComponent = (function () {
    function Wrapper_ElevatorComponent(p0, p1) {
        this._changed = false;
        this.context = new import0.ElevatorComponent(p0, p1);
        this._expr_0 = import1.UNINITIALIZED;
    }
    Wrapper_ElevatorComponent.prototype.ngOnDetach = function (view, componentView, el) {
    };
    Wrapper_ElevatorComponent.prototype.ngOnDestroy = function () {
    };
    Wrapper_ElevatorComponent.prototype.check_elevator = function (currValue, throwOnChange, forceUpdate) {
        if ((forceUpdate || import3.checkBinding(throwOnChange, this._expr_0, currValue))) {
            this._changed = true;
            this.context.elevator = currValue;
            this._expr_0 = currValue;
        }
    };
    Wrapper_ElevatorComponent.prototype.ngDoCheck = function (view, el, throwOnChange) {
        var changed = this._changed;
        this._changed = false;
        return changed;
    };
    Wrapper_ElevatorComponent.prototype.checkHost = function (view, componentView, el, throwOnChange) {
    };
    Wrapper_ElevatorComponent.prototype.handleEvent = function (eventName, $event) {
        var result = true;
        return result;
    };
    Wrapper_ElevatorComponent.prototype.subscribe = function (view, _eventHandler) {
        this._eventHandler = _eventHandler;
    };
    return Wrapper_ElevatorComponent;
}());
var renderType_ElevatorComponent_Host = import3.createRenderComponentType('', 0, import5.ViewEncapsulation.None, [], {});
var View_ElevatorComponent_Host0 = (function (_super) {
    __extends(View_ElevatorComponent_Host0, _super);
    function View_ElevatorComponent_Host0(viewUtils, parentView, parentIndex, parentElement) {
        _super.call(this, View_ElevatorComponent_Host0, renderType_ElevatorComponent_Host, import6.ViewType.HOST, viewUtils, parentView, parentIndex, parentElement, import7.ChangeDetectorStatus.CheckAlways);
    }
    View_ElevatorComponent_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer, 'elevator', import3.EMPTY_INLINE_ARRAY, rootSelector, null);
        this.compView_0 = new View_ElevatorComponent0(this.viewUtils, this, 0, this._el_0);
        this._ElevatorComponent_0_3 = new Wrapper_ElevatorComponent(this.injectorGet(import9.NgZone, this.parentIndex), this.injectorGet(import10.TasksService, this.parentIndex));
        this.compView_0.create(this._ElevatorComponent_0_3.context);
        this.init(this._el_0, (this.renderer.directRenderer ? null : [this._el_0]), null);
        return new import8.ComponentRef_(0, this, this._el_0, this._ElevatorComponent_0_3.context);
    };
    View_ElevatorComponent_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import0.ElevatorComponent) && (0 === requestNodeIndex))) {
            return this._ElevatorComponent_0_3.context;
        }
        return notFoundResult;
    };
    View_ElevatorComponent_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this._ElevatorComponent_0_3.ngDoCheck(this, this._el_0, throwOnChange);
        this.compView_0.internalDetectChanges(throwOnChange);
    };
    View_ElevatorComponent_Host0.prototype.destroyInternal = function () {
        this.compView_0.destroy();
    };
    View_ElevatorComponent_Host0.prototype.visitRootNodesInternal = function (cb, ctx) {
        cb(this._el_0, ctx);
    };
    return View_ElevatorComponent_Host0;
}(import2.AppView));
export var ElevatorComponentNgFactory = new import8.ComponentFactory('elevator', View_ElevatorComponent_Host0, import0.ElevatorComponent);
var styles_ElevatorComponent = [];
var renderType_ElevatorComponent = import3.createRenderComponentType('', 0, import5.ViewEncapsulation.None, styles_ElevatorComponent, {});
export var View_ElevatorComponent0 = (function (_super) {
    __extends(View_ElevatorComponent0, _super);
    function View_ElevatorComponent0(viewUtils, parentView, parentIndex, parentElement) {
        _super.call(this, View_ElevatorComponent0, renderType_ElevatorComponent, import6.ViewType.COMPONENT, viewUtils, parentView, parentIndex, parentElement, import7.ChangeDetectorStatus.CheckAlways);
        this._expr_8 = import1.UNINITIALIZED;
        this._expr_9 = import1.UNINITIALIZED;
        this._map_10 = import3.pureProxy1(function (p0) {
            return { open: p0 };
        });
    }
    View_ElevatorComponent0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.parentElement);
        this._text_0 = this.renderer.createText(parentRenderNode, '\n    ', null);
        this._el_1 = import3.createRenderElement(this.renderer, parentRenderNode, 'div', new import3.InlineArray2(2, 'class', 'elevator'), null);
        this._NgClass_1_3 = new import11.Wrapper_NgClass(this.parentView.injectorGet(import13.IterableDiffers, this.parentIndex), this.parentView.injectorGet(import14.KeyValueDiffers, this.parentIndex), new import15.ElementRef(this._el_1), this.renderer);
        this._ElevatorDirective_1_4 = new import12.Wrapper_ElevatorDirective(new import15.ElementRef(this._el_1), this.parentView.injectorGet(import0.ElevatorComponent, this.parentIndex));
        this._text_2 = this.renderer.createText(this._el_1, '\n      ', null);
        this._el_3 = import3.createRenderElement(this.renderer, this._el_1, 'span', new import3.InlineArray2(2, 'class', 'cube'), null);
        this._text_4 = this.renderer.createText(this._el_1, '\n    ', null);
        this._text_5 = this.renderer.createText(parentRenderNode, '\n  ', null);
        this.init(null, (this.renderer.directRenderer ? null : [
            this._text_0,
            this._el_1,
            this._text_2,
            this._el_3,
            this._text_4,
            this._text_5
        ]), null);
        return null;
    };
    View_ElevatorComponent0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import16.NgClass) && ((1 <= requestNodeIndex) && (requestNodeIndex <= 4)))) {
            return this._NgClass_1_3.context;
        }
        if (((token === import17.ElevatorDirective) && ((1 <= requestNodeIndex) && (requestNodeIndex <= 4)))) {
            return this._ElevatorDirective_1_4.context;
        }
        return notFoundResult;
    };
    View_ElevatorComponent0.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_1_0_0 = 'elevator';
        this._NgClass_1_3.check_klass(currVal_1_0_0, throwOnChange, false);
        var currVal_1_0_1 = this._map_10((this.context.elevator.open === true));
        this._NgClass_1_3.check_ngClass(currVal_1_0_1, throwOnChange, false);
        this._NgClass_1_3.ngDoCheck(this, this._el_1, throwOnChange);
        this._ElevatorDirective_1_4.ngDoCheck(this, this._el_1, throwOnChange);
        var currVal_8 = this.context.elevator.current;
        if (import3.checkBinding(throwOnChange, this._expr_8, currVal_8)) {
            this.renderer.setElementAttribute(this._el_1, 'current', ((currVal_8 == null) ? null : currVal_8.toString()));
            this._expr_8 = currVal_8;
        }
        var currVal_9 = this.context.elevator.next;
        if (import3.checkBinding(throwOnChange, this._expr_9, currVal_9)) {
            this.renderer.setElementAttribute(this._el_1, 'next', ((currVal_9 == null) ? null : currVal_9.toString()));
            this._expr_9 = currVal_9;
        }
        if (!throwOnChange) {
            this._ElevatorDirective_1_4.context.ngAfterViewChecked();
        }
    };
    return View_ElevatorComponent0;
}(import2.AppView));
//# sourceMappingURL=elevator.ngfactory.js.map